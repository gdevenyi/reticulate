% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py_require.R
\name{py_require}
\alias{py_require}
\title{Declare Python requirements}
\usage{
py_require(
  packages = NULL,
  python_version = NULL,
  exclude_newer = NULL,
  action = c("add", "remove", "set")
)
}
\arguments{
\item{packages}{A character vector of Python packages to make available
during the working session. These can be bare python package names like
\code{"jax"}, or package names with version constraints like \code{"jax[cpu]>=0.5"}}

\item{python_version}{A character vector of Python version constraints.
(e.g.: \code{"3.10"} or \code{">=3.9,<3.13,!=3.11"}).}

\item{exclude_newer}{Only use package versions that were published prior to a
given date. This provides a light-weight alternative to "freezing" Python
package versions, to guard against future package versions breaking a
workflow. After the first time \code{exclude_newer}, only the 'set' \code{action} can
override the date afterwards.}

\item{action}{What \code{py_require()} should do with the provided \code{packages} and
\code{python_version}. There are three options:
\itemize{
\item \code{add}: Adds the entries to the current set of requirements.
\item \code{remove}: Removes the entries from the list of requirements. Strings must
be an exact match to an existing requirement. For example, if
\code{"numpy==2.2.2"} is currently on the list, passing \code{"numpy"} with a
'remove' action will not affect the list. Requests to remove entries that
are not present are silently ignored.
\item \code{set}: Deletes any requirement already defined, and replaces them with what
is provided in the command call. Packages and Python version can be
independently set.
}}
}
\description{
\code{py_require()} allows you to declare Python requirements for the R session,
including Python packages, any version constraints on those packages, and any
version constraints on Python itself. Reticulate can then automatically
create and use an ephemeral Python environment that satisfies all the Python
requirements.
}
\details{
The virtual environment will not be created until the users attempts to
interacts with Python for the first time during the R session. Typically,
that would be the first time \code{import()} is called.

If \code{py_require()} is called with new requirements after reticulate has
already initialized an ephemeral Python environment, then a new ephemeral
environment is activated, layered atop of the existing one. Note that after
initializing Python, only adding python packages is supported. Removing
python packages, changing the Python version, or changing \code{excluding_newer}
cannot change after reticulate has initialized Python.

If \code{py_require()} is called without arguments, then a list is returned with
the currently declared requirements.

\code{py_require()} can also be called from R packages (e.g., in \code{.onLoad()} or
elsewhere) to declare Python requirements. You can view which Python
dependencies have been been declared by R packages in the current R session
by printing with \code{py_require()} by printing \code{py_require()}.
}
