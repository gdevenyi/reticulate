% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py_require.R
\name{py_require}
\alias{py_require}
\title{Declare Python Requirements}
\usage{
py_require(
  packages = NULL,
  python_version = NULL,
  ...,
  exclude_newer = NULL,
  action = c("add", "remove", "set")
)
}
\arguments{
\item{packages}{A character vector of Python packages to be available during
the session. These can be simple package names like \code{"jax"} or names with
version constraints like \code{"jax[cpu]>=0.5"}.}

\item{python_version}{A character vector of Python version constraints \cr
(e.g., \code{"3.10"} or \code{">=3.9,<3.13,!=3.11"}).}

\item{...}{Dots are for future extensions, must be empty.}

\item{exclude_newer}{Restricts package versions to those published before a
specified date. This offers a lightweight alternative to freezing package
versions, to guard against future published package versions breaking a
workflow. Once  \code{exclude_newer} is set, only the \code{set} action can override
it.}

\item{action}{Defines how \code{py_require()} handles the provided requirements.
Options are:
\itemize{
\item \code{add}: Add the entries to the current set of requirements.
\item \code{remove}: Remove exact matches from the requirements list. For example, if
\code{"numpy==2.2.2"} is in the list, passing \code{"numpy"} with \code{action = "remove"}
will not remove it. Requests to remove nonexistent entries are ignored.
\item \code{set}: Clear all existing requirements and replaces them with the
provided ones. Packages and the Python version can be set independently.
}}
}
\description{
\code{py_require()} allows you to declare Python requirements for the R session,
including Python packages, any version constraints on those packages, and any
version constraints on Python itself. Reticulate can then automatically
create and use an ephemeral Python environment that satisfies all these
requirements.
}
\details{
Reticulate will only use an ephemeral environment if no other Python
installation is found earlier in the \href{https://rstudio.github.io/reticulate/articles/versions.html#order-of-discovery}{Order of Discovery}.
You can also force reticulate to use an ephemeral environment by setting
\code{Sys.setenv(RETICULATE_USE_MANAGED_VENV = "yes")}.

The ephemeral virtual environment is not created until the user interacts
with Python for the first time in the R session. Typically, this occurs when
\code{import()} is first called.

If \code{py_require()} is called with new requirements after Reticulate has
already initialized an ephemeral Python environment, a new ephemeral
environment is activated on top of the existing one. Once Python is
initialized, only adding packages is supported--removing packages, changing
the Python version, or modifying \code{exclude_newer} is not possible.

Calling \code{py_require()} without arguments returns a list of the currently
declared requirements.

\code{py_require()} can also be used in R packages (e.g., in \code{.onLoad()} or
elsewhere) to declare Python dependencies. The print method for
\code{py_require()} shows the Python dependencies declared by R packages in the
current session.
}
\note{
Reticulate uses \href{https://docs.astral.sh/uv/}{\code{uv}} to resolve Python
dependencies. Many \code{uv} options can be customized via environment
variables, as described
\href{https://docs.astral.sh/uv/configuration/environment/}{here}. For example,
you can set \code{Sys.setenv(UV_OFFLINE=1)} or \code{Sys.setenv(UV_INDEX = "https://download.pytorch.org/whl/cpu")}.
}
